動画を見た感じだと、

- Input  
- Output  

で分けて情報を整理するのが最も大切

# Small Code Challenge Problems
  - 20 - 45 minutes
  - typical solutions: 10-40 LOC
  - used extensively in interviews for a reason
    - mastery on a language
    - logic / reasoning
    - communications
  - not a skill that you "acquire and file away", but needs a lot of practice

# Understand the Problem
  - requirements are explicit
    - take notes
    - ex) the odd words problem
  - requirements are not so explicit and need to be modeled
    - requirements are showed with examples
      - examples need to be described in computational words
      - diamond of stars
    - implicit knowledge needs to be captured
      - convert to explicit rules, in computational language
      - ex) what century is that
    - identifying and defining important terms and concepts
      - [queen attack(maybe an easy version?)](https://launchschool.com/exercises/81d3afa6)
      - same row; same column; esp. same diagonal
    - ask questions to verify your understanding!

# Examples / Test Cases
  - Input / Output
  - Test cases serve two purposes:
    - help you understand the problem
    - allow you to verify your solution
  - happy paths
    - combination of requirements; the "obvious" result
  - Edge cases
    - focus on input
    - emptiness (nil/null, "", [], {})
    - boundary conditions
    - repetition / duplication
    - data types
  - Failures / Bad Input
    - raise exceptions / report errors
    - return a special value (nil/null, 0, "", [] etc)
  - ask questions to verify your understanding!